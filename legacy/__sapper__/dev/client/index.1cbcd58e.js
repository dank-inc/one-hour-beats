import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, w as validate_each_argument, v as validate_store, a as component_subscribe, b as validate_slots, x as jamStore, y as userStore, z as globals, A as create_component, B as claim_component, C as mount_component, D as transition_in, E as transition_out, F as destroy_component, f as space, e as element, t as text, G as query_selector_all, l as detach_dev, m as claim_space, g as claim_element, h as children, k as claim_text, o as add_location, n as attr_dev, p as insert_dev, q as append_dev, r as set_data_dev, H as check_outros, I as destroy_each, J as group_outros } from './client.61dd763a.js';
import { J as JamLink } from './JamLink.3a70df55.js';
import './time.8f7c612d.js';

/* src/routes/index.svelte generated by Svelte v3.20.1 */

const { Object: Object_1 } = globals;
const file = "src/routes/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i][0];
	child_ctx[6] = list[i][1];
	return child_ctx;
}

// (21:2) {#each Object.entries(jamIndex) as [id, jam]}
function create_each_block(ctx) {
	let current;

	const jamlink = new JamLink({
			props: { jam: /*jam*/ ctx[6] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(jamlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(jamlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(jamlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const jamlink_changes = {};
			if (dirty & /*jamIndex*/ 2) jamlink_changes.jam = /*jam*/ ctx[6];
			jamlink.$set(jamlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(jamlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(jamlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(jamlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(21:2) {#each Object.entries(jamIndex) as [id, jam]}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let header;
	let h1;
	let t1;
	let t2;
	let p0;
	let t3;
	let t4;
	let t5;
	let t6;
	let div;
	let t7;
	let p1;
	let a;
	let t8;
	let current;
	let each_value = Object.entries(/*jamIndex*/ ctx[1]);
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			t0 = space();
			header = element("header");
			h1 = element("h1");
			t1 = text("Home");
			t2 = space();
			p0 = element("p");
			t3 = text("Welcome, ");
			t4 = text(/*userName*/ ctx[0]);
			t5 = text(" - Pick a challenge and get jammin!");
			t6 = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t7 = space();
			p1 = element("p");
			a = element("a");
			t8 = text("Make a new Jam");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1m1aun2\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			header = claim_element(nodes, "HEADER", {});
			var header_nodes = children(header);
			h1 = claim_element(header_nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Home");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(header_nodes);
			p0 = claim_element(header_nodes, "P", {});
			var p0_nodes = children(p0);
			t3 = claim_text(p0_nodes, "Welcome, ");
			t4 = claim_text(p0_nodes, /*userName*/ ctx[0]);
			t5 = claim_text(p0_nodes, " - Pick a challenge and get jammin!");
			p0_nodes.forEach(detach_dev);
			header_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			t7 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			a = claim_element(p1_nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			t8 = claim_text(a_nodes, "Make a new Jam");
			a_nodes.forEach(detach_dev);
			p1_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "One Hour Beats - Home";
			add_location(h1, file, 15, 2, 353);
			add_location(p0, file, 16, 2, 369);
			add_location(header, file, 14, 0, 342);
			attr_dev(a, "class", "button");
			attr_dev(a, "href", "/create");
			add_location(a, file, 25, 4, 583);
			attr_dev(p1, "class", "right svelte-1wxznvw");
			add_location(p1, file, 24, 2, 561);
			attr_dev(div, "class", "page-content jam-list svelte-1wxznvw");
			add_location(div, file, 19, 0, 442);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, header, anchor);
			append_dev(header, h1);
			append_dev(h1, t1);
			append_dev(header, t2);
			append_dev(header, p0);
			append_dev(p0, t3);
			append_dev(p0, t4);
			append_dev(p0, t5);
			insert_dev(target, t6, anchor);
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			append_dev(div, t7);
			append_dev(div, p1);
			append_dev(p1, a);
			append_dev(a, t8);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*userName*/ 1) set_data_dev(t4, /*userName*/ ctx[0]);

			if (dirty & /*Object, jamIndex*/ 2) {
				each_value = Object.entries(/*jamIndex*/ ctx[1]);
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, t7);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(header);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $userStore;
	let $jamStore;
	validate_store(userStore, "userStore");
	component_subscribe($$self, userStore, $$value => $$invalidate(2, $userStore = $$value));
	validate_store(jamStore, "jamStore");
	component_subscribe($$self, jamStore, $$value => $$invalidate(3, $jamStore = $$value));
	let currentTime = parseInt(new Date().getTime() / 1000);
	const writable_props = [];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Routes", $$slots, []);

	$$self.$capture_state = () => ({
		jamStore,
		JamLink,
		userStore,
		currentTime,
		userName,
		$userStore,
		jamIndex,
		$jamStore
	});

	$$self.$inject_state = $$props => {
		if ("currentTime" in $$props) currentTime = $$props.currentTime;
		if ("userName" in $$props) $$invalidate(0, userName = $$props.userName);
		if ("jamIndex" in $$props) $$invalidate(1, jamIndex = $$props.jamIndex);
	};

	let userName;
	let jamIndex;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$userStore*/ 4) {
			 $$invalidate(0, userName = $userStore.name);
		}

		if ($$self.$$.dirty & /*$jamStore*/ 8) {
			 $$invalidate(1, jamIndex = $jamStore);
		}
	};

	return [userName, jamIndex];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguMWNiY2Q1OGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCB7IGphbVN0b3JlIH0gZnJvbSBcIi4uL3N0b3JlXCI7XG4gIGltcG9ydCBKYW1MaW5rIGZyb20gXCIuLi9jb21wb25lbnRzL0phbUxpbmsuc3ZlbHRlXCI7XG4gIGltcG9ydCB7IHVzZXJTdG9yZSB9IGZyb20gXCIuLi9zdG9yZVwiO1xuICAkOiB1c2VyTmFtZSA9ICR1c2VyU3RvcmUubmFtZTtcblxuICBsZXQgY3VycmVudFRpbWUgPSBwYXJzZUludChuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApO1xuICAkOiBqYW1JbmRleCA9ICRqYW1TdG9yZTtcbjwvc2NyaXB0PlxuXG48c3ZlbHRlOmhlYWQ+XG4gIDx0aXRsZT5PbmUgSG91ciBCZWF0cyAtIEhvbWU8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPGhlYWRlcj5cbiAgPGgxPkhvbWU8L2gxPlxuICA8cD5XZWxjb21lLCB7dXNlck5hbWV9IC0gUGljayBhIGNoYWxsZW5nZSBhbmQgZ2V0IGphbW1pbiE8L3A+XG48L2hlYWRlcj5cblxuPGRpdiBjbGFzcz1cInBhZ2UtY29udGVudCBqYW0tbGlzdFwiPlxuICB7I2VhY2ggT2JqZWN0LmVudHJpZXMoamFtSW5kZXgpIGFzIFtpZCwgamFtXX1cbiAgICA8SmFtTGluayB7amFtfSAvPlxuICB7L2VhY2h9XG5cbiAgPHAgY2xhc3M9XCJyaWdodFwiPlxuICAgIDxhIGNsYXNzPVwiYnV0dG9uXCIgaHJlZj1cIi9jcmVhdGVcIj5NYWtlIGEgbmV3IEphbTwvYT5cbiAgPC9wPlxuPC9kaXY+XG5cbjxzdHlsZT5cbiAgLmphbS1saXN0IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZTtcbiAgfVxuICBwLnJpZ2h0IHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgfVxuPC9zdHlsZT5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQkFvQlMsTUFBTSxDQUFDLE9BQU8sY0FBQyxHQUFROzs7O2dDQUE1QixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7OzswQkFKTyxHQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQ0FBUixHQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eUVBQVIsR0FBUTs7O2lCQUlkLE1BQU0sQ0FBQyxPQUFPLGNBQUMsR0FBUTs7OzsrQkFBNUIsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozt3QkFBSixNQUFJOzs7Ozs7Ozs7O2tDQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQWRGLFdBQVcsR0FBRyxRQUFRLEtBQUssSUFBSSxHQUFHLE9BQU8sS0FBSyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBRm5ELFFBQVEsR0FBRyxVQUFVLENBQUMsSUFBSTs7OztvQkFHMUIsUUFBUSxHQUFHLFNBQVM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9

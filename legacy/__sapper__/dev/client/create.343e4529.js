import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_store, a as component_subscribe, K as getContext, b as validate_slots, y as userStore, L as goto, e as element, t as text, f as space, g as claim_element, h as children, k as claim_text, l as detach_dev, m as claim_space, o as add_location, n as attr_dev, p as insert_dev, q as append_dev, M as set_input_value, N as run_all, O as listen_dev, P as prevent_default, u as noop, Q as to_number } from './client.61dd763a.js';

const prompts = [
  "eg: make a track that sounds like a childhood nightmare",
  "eg: First line must contain these words: love, dank",
  "eg: Make a background track to match the muted video",
];

/* src/routes/create.svelte generated by Svelte v3.20.1 */
const file = "src/routes/create.svelte";

function create_fragment(ctx) {
	let header;
	let h1;
	let t0;
	let t1;
	let p;
	let t2;
	let t3;
	let div5;
	let form;
	let div0;
	let label0;
	let t4;
	let t5;
	let input0;
	let t6;
	let div1;
	let label1;
	let t7;
	let t8;
	let input1;
	let input1_updating = false;
	let t9;
	let h3;
	let t10;
	let t11;
	let div4;
	let div2;
	let label2;
	let t12;
	let t13;
	let textarea;
	let t14;
	let div3;
	let button;
	let t15;
	let dispose;

	function input1_input_handler() {
		input1_updating = true;
		/*input1_input_handler*/ ctx[9].call(input1);
	}

	const block = {
		c: function create() {
			header = element("header");
			h1 = element("h1");
			t0 = text("Create Challenge!");
			t1 = space();
			p = element("p");
			t2 = text("Make your very own challenge here!");
			t3 = space();
			div5 = element("div");
			form = element("form");
			div0 = element("div");
			label0 = element("label");
			t4 = text("Name of Challenge:");
			t5 = space();
			input0 = element("input");
			t6 = space();
			div1 = element("div");
			label1 = element("label");
			t7 = text("time limit (in minutes):");
			t8 = space();
			input1 = element("input");
			t9 = space();
			h3 = element("h3");
			t10 = text("Outline of the rules of the challenge:");
			t11 = space();
			div4 = element("div");
			div2 = element("div");
			label2 = element("label");
			t12 = text("General Prompt");
			t13 = space();
			textarea = element("textarea");
			t14 = space();
			div3 = element("div");
			button = element("button");
			t15 = text("Create!");
			this.h();
		},
		l: function claim(nodes) {
			header = claim_element(nodes, "HEADER", {});
			var header_nodes = children(header);
			h1 = claim_element(header_nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Create Challenge!");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(header_nodes);
			p = claim_element(header_nodes, "P", {});
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, "Make your very own challenge here!");
			p_nodes.forEach(detach_dev);
			header_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			div5 = claim_element(nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			form = claim_element(div5_nodes, "FORM", { class: true });
			var form_nodes = children(form);
			div0 = claim_element(form_nodes, "DIV", {});
			var div0_nodes = children(div0);
			label0 = claim_element(div0_nodes, "LABEL", { class: true });
			var label0_nodes = children(label0);
			t4 = claim_text(label0_nodes, "Name of Challenge:");
			label0_nodes.forEach(detach_dev);
			t5 = claim_space(div0_nodes);
			input0 = claim_element(div0_nodes, "INPUT", { placeholder: true, class: true });
			div0_nodes.forEach(detach_dev);
			t6 = claim_space(form_nodes);
			div1 = claim_element(form_nodes, "DIV", {});
			var div1_nodes = children(div1);
			label1 = claim_element(div1_nodes, "LABEL", { class: true });
			var label1_nodes = children(label1);
			t7 = claim_text(label1_nodes, "time limit (in minutes):");
			label1_nodes.forEach(detach_dev);
			t8 = claim_space(div1_nodes);

			input1 = claim_element(div1_nodes, "INPUT", {
				type: true,
				min: true,
				max: true,
				class: true
			});

			div1_nodes.forEach(detach_dev);
			t9 = claim_space(form_nodes);
			h3 = claim_element(form_nodes, "H3", {});
			var h3_nodes = children(h3);
			t10 = claim_text(h3_nodes, "Outline of the rules of the challenge:");
			h3_nodes.forEach(detach_dev);
			t11 = claim_space(form_nodes);
			div4 = claim_element(form_nodes, "DIV", {});
			var div4_nodes = children(div4);
			div2 = claim_element(div4_nodes, "DIV", {});
			var div2_nodes = children(div2);
			label2 = claim_element(div2_nodes, "LABEL", { class: true });
			var label2_nodes = children(label2);
			t12 = claim_text(label2_nodes, "General Prompt");
			label2_nodes.forEach(detach_dev);
			t13 = claim_space(div2_nodes);
			textarea = claim_element(div2_nodes, "TEXTAREA", { placeholder: true, class: true });
			children(textarea).forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t14 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", {});
			var div3_nodes = children(div3);
			button = claim_element(div3_nodes, "BUTTON", { type: true, class: true });
			var button_nodes = children(button);
			t15 = claim_text(button_nodes, "Create!");
			button_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			form_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 30, 2, 640);
			add_location(p, file, 31, 2, 670);
			add_location(header, file, 29, 0, 628);
			attr_dev(label0, "class", "svelte-1uau2ig");
			add_location(label0, file, 37, 6, 838);
			attr_dev(input0, "placeholder", "Challenge Name");
			attr_dev(input0, "class", "svelte-1uau2ig");
			add_location(input0, file, 38, 6, 879);
			add_location(div0, file, 36, 4, 825);
			attr_dev(label1, "class", "svelte-1uau2ig");
			add_location(label1, file, 41, 6, 966);
			attr_dev(input1, "type", "number");
			attr_dev(input1, "min", "0");
			attr_dev(input1, "max", "240");
			attr_dev(input1, "class", "svelte-1uau2ig");
			add_location(input1, file, 42, 6, 1013);
			add_location(div1, file, 40, 4, 953);
			add_location(h3, file, 44, 4, 1095);
			attr_dev(label2, "class", "svelte-1uau2ig");
			add_location(label2, file, 47, 8, 1176);
			attr_dev(textarea, "placeholder", /*placeholder*/ ctx[3]);
			attr_dev(textarea, "class", "svelte-1uau2ig");
			add_location(textarea, file, 48, 8, 1215);
			add_location(div2, file, 46, 6, 1161);
			attr_dev(button, "type", "submit");
			attr_dev(button, "class", "svelte-1uau2ig");
			add_location(button, file, 51, 8, 1303);
			add_location(div3, file, 50, 6, 1288);
			add_location(div4, file, 45, 4, 1148);
			attr_dev(form, "class", "sexyform svelte-1uau2ig");
			add_location(form, file, 35, 2, 756);
			attr_dev(div5, "class", "page-content");
			add_location(div5, file, 34, 0, 726);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, header, anchor);
			append_dev(header, h1);
			append_dev(h1, t0);
			append_dev(header, t1);
			append_dev(header, p);
			append_dev(p, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, div5, anchor);
			append_dev(div5, form);
			append_dev(form, div0);
			append_dev(div0, label0);
			append_dev(label0, t4);
			append_dev(div0, t5);
			append_dev(div0, input0);
			set_input_value(input0, /*name*/ ctx[0]);
			append_dev(form, t6);
			append_dev(form, div1);
			append_dev(div1, label1);
			append_dev(label1, t7);
			append_dev(div1, t8);
			append_dev(div1, input1);
			set_input_value(input1, /*timeLimit*/ ctx[2]);
			append_dev(form, t9);
			append_dev(form, h3);
			append_dev(h3, t10);
			append_dev(form, t11);
			append_dev(form, div4);
			append_dev(div4, div2);
			append_dev(div2, label2);
			append_dev(label2, t12);
			append_dev(div2, t13);
			append_dev(div2, textarea);
			set_input_value(textarea, /*description*/ ctx[1]);
			append_dev(div4, t14);
			append_dev(div4, div3);
			append_dev(div3, button);
			append_dev(button, t15);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(input0, "input", /*input0_input_handler*/ ctx[8]),
				listen_dev(input1, "input", input1_input_handler),
				listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[10]),
				listen_dev(form, "submit", prevent_default(/*handleSubmit*/ ctx[4]), false, true, false)
			];
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*name*/ 1 && input0.value !== /*name*/ ctx[0]) {
				set_input_value(input0, /*name*/ ctx[0]);
			}

			if (!input1_updating && dirty & /*timeLimit*/ 4) {
				set_input_value(input1, /*timeLimit*/ ctx[2]);
			}

			input1_updating = false;

			if (dirty & /*description*/ 2) {
				set_input_value(textarea, /*description*/ ctx[1]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(header);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div5);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $userStore;
	validate_store(userStore, "userStore");
	component_subscribe($$self, userStore, $$value => $$invalidate(5, $userStore = $$value));
	let { getSocket } = getContext("socket");
	const placeholder = prompts[Math.floor(Math.random() * (prompts.length - 1))];
	let name;
	let description;
	let timeLimit = 60;
	let userId = $userStore.id;

	function handleSubmit() {
		const socket = getSocket();

		socket.emit("createJam", {
			name,
			description,
			timeLimit: timeLimit * 60,
			userId
		});

		goto("/");
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Create> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Create", $$slots, []);

	function input0_input_handler() {
		name = this.value;
		$$invalidate(0, name);
	}

	function input1_input_handler() {
		timeLimit = to_number(this.value);
		$$invalidate(2, timeLimit);
	}

	function textarea_input_handler() {
		description = this.value;
		$$invalidate(1, description);
	}

	$$self.$capture_state = () => ({
		getContext,
		userStore,
		goto,
		prompts,
		getSocket,
		placeholder,
		name,
		description,
		timeLimit,
		userId,
		handleSubmit,
		$userStore
	});

	$$self.$inject_state = $$props => {
		if ("getSocket" in $$props) getSocket = $$props.getSocket;
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
		if ("description" in $$props) $$invalidate(1, description = $$props.description);
		if ("timeLimit" in $$props) $$invalidate(2, timeLimit = $$props.timeLimit);
		if ("userId" in $$props) userId = $$props.userId;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		name,
		description,
		timeLimit,
		placeholder,
		handleSubmit,
		$userStore,
		getSocket,
		userId,
		input0_input_handler,
		input1_input_handler,
		textarea_input_handler
	];
}

class Create extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Create",
			options,
			id: create_fragment.name
		});
	}
}

export default Create;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLjM0M2U0NTI5LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29uc3RhbnRzL3Byb21wdHMuanMiLCIuLi8uLi8uLi9zcmMvcm91dGVzL2NyZWF0ZS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHByb21wdHMgPSBbXHJcbiAgXCJlZzogbWFrZSBhIHRyYWNrIHRoYXQgc291bmRzIGxpa2UgYSBjaGlsZGhvb2QgbmlnaHRtYXJlXCIsXHJcbiAgXCJlZzogRmlyc3QgbGluZSBtdXN0IGNvbnRhaW4gdGhlc2Ugd29yZHM6IGxvdmUsIGRhbmtcIixcclxuICBcImVnOiBNYWtlIGEgYmFja2dyb3VuZCB0cmFjayB0byBtYXRjaCB0aGUgbXV0ZWQgdmlkZW9cIixcclxuXTtcclxuIiwiPHNjcmlwdD5cclxuICBpbXBvcnQgeyBnZXRDb250ZXh0IH0gZnJvbSBcInN2ZWx0ZVwiO1xyXG4gIGltcG9ydCB7IHVzZXJTdG9yZSB9IGZyb20gXCIuLi9zdG9yZVwiO1xyXG4gIGltcG9ydCB7IGdvdG8gfSBmcm9tIFwiQHNhcHBlci9hcHBcIjtcclxuICBpbXBvcnQgeyBwcm9tcHRzIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9wcm9tcHRzXCI7XHJcblxyXG4gIGxldCB7IGdldFNvY2tldCB9ID0gZ2V0Q29udGV4dChcInNvY2tldFwiKTtcclxuXHJcbiAgY29uc3QgcGxhY2Vob2xkZXIgPVxyXG4gICAgcHJvbXB0c1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAocHJvbXB0cy5sZW5ndGggLSAxKSldO1xyXG5cclxuICBsZXQgbmFtZTtcclxuICBsZXQgZGVzY3JpcHRpb247XHJcbiAgbGV0IHRpbWVMaW1pdCA9IDYwO1xyXG4gIGxldCB1c2VySWQgPSAkdXNlclN0b3JlLmlkO1xyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVTdWJtaXQoKSB7XHJcbiAgICBjb25zdCBzb2NrZXQgPSBnZXRTb2NrZXQoKTtcclxuXHJcbiAgICBzb2NrZXQuZW1pdChcImNyZWF0ZUphbVwiLCB7XHJcbiAgICAgIG5hbWUsXHJcbiAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICB0aW1lTGltaXQ6IHRpbWVMaW1pdCAqIDYwLFxyXG4gICAgICB1c2VySWRcclxuICAgIH0pO1xyXG4gICAgZ290byhcIi9cIik7XHJcbiAgfVxyXG48L3NjcmlwdD5cclxuXHJcbjxoZWFkZXI+XHJcbiAgPGgxPkNyZWF0ZSBDaGFsbGVuZ2UhPC9oMT5cclxuICA8cD5NYWtlIHlvdXIgdmVyeSBvd24gY2hhbGxlbmdlIGhlcmUhPC9wPlxyXG48L2hlYWRlcj5cclxuXHJcbjxkaXYgY2xhc3M9XCJwYWdlLWNvbnRlbnRcIj5cclxuICA8Zm9ybSBvbjpzdWJtaXR8cHJldmVudERlZmF1bHQ9e2hhbmRsZVN1Ym1pdH0gY2xhc3M9XCJzZXh5Zm9ybVwiPlxyXG4gICAgPGRpdj5cclxuICAgICAgPGxhYmVsPk5hbWUgb2YgQ2hhbGxlbmdlOjwvbGFiZWw+XHJcbiAgICAgIDxpbnB1dCBiaW5kOnZhbHVlPXtuYW1lfSBwbGFjZWhvbGRlcj1cIkNoYWxsZW5nZSBOYW1lXCIgLz5cclxuICAgIDwvZGl2PlxyXG4gICAgPGRpdj5cclxuICAgICAgPGxhYmVsPnRpbWUgbGltaXQgKGluIG1pbnV0ZXMpOjwvbGFiZWw+XHJcbiAgICAgIDxpbnB1dCBiaW5kOnZhbHVlPXt0aW1lTGltaXR9IHR5cGU9XCJudW1iZXJcIiBtaW49XCIwXCIgbWF4PVwiMjQwXCIgLz5cclxuICAgIDwvZGl2PlxyXG4gICAgPGgzPk91dGxpbmUgb2YgdGhlIHJ1bGVzIG9mIHRoZSBjaGFsbGVuZ2U6PC9oMz5cclxuICAgIDxkaXY+XHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAgPGxhYmVsPkdlbmVyYWwgUHJvbXB0PC9sYWJlbD5cclxuICAgICAgICA8dGV4dGFyZWEgYmluZDp2YWx1ZT17ZGVzY3JpcHRpb259IHtwbGFjZWhvbGRlcn0gLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCI+Q3JlYXRlITwvYnV0dG9uPlxyXG4gICAgICA8L2Rpdj5cclxuXHJcbiAgICA8L2Rpdj5cclxuICA8L2Zvcm0+XHJcbjwvZGl2PlxyXG5cclxuPHN0eWxlPlxyXG4gIC5zZXh5Zm9ybSB7XHJcbiAgICBmb250LXNpemU6IDE2cHQ7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHBhZGRpbmc6IDR2bWluO1xyXG4gICAgbWFyZ2luOiBhdXRvO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMXZtaW47XHJcbiAgfVxyXG4gIC5zZXh5Zm9ybSBpbnB1dCB7XHJcbiAgfVxyXG5cclxuICAuc2V4eWZvcm0gbGFiZWwge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgfVxyXG4gIC5zZXh5Zm9ybSB0ZXh0YXJlYSB7XHJcbiAgICBmb250LXNpemU6IDE0cHQ7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHBhZGRpbmc6IDJ2bWluO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMXZtaW47XHJcbiAgICBmb250LWZhbWlseTogXCJGaXJhIENvZGVcIiwgc2Fucy1zZXJpZjtcclxuICAgIGNvbG9yOiAjNTU1O1xyXG4gICAgbGV0dGVyLXNwYWNpbmc6IDAuMDVlbTtcclxuICB9XHJcbiAgLnNleHlmb3JtIGJ1dHRvbiB7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxdm1pbjtcclxuICAgIHBhZGRpbmc6IDF2bWluO1xyXG4gIH1cclxuPC9zdHlsZT5cclxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQU8sTUFBTSxPQUFPLEdBQUc7QUFDdkIsRUFBRSx5REFBeUQ7QUFDM0QsRUFBRSxxREFBcUQ7QUFDdkQsRUFBRSxzREFBc0Q7QUFDeEQsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQ0NrQ3dCLEdBQUk7Ozs7Ozs7eUNBSUosR0FBUzs7Ozs7Ozs7Ozs7NkNBTUosR0FBVzs7Ozs7Ozs7Ozs7Z0VBYlAsR0FBWTs7Ozt1REFHckIsR0FBSTtxQ0FBSixHQUFJOzs7OzBDQUlKLEdBQVM7Ozs7Ozs4Q0FNSixHQUFXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BMUNqQyxTQUFTLEtBQUssVUFBVSxDQUFDLFFBQVE7T0FFakMsV0FBVyxHQUNmLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLE1BQU0sT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDO0tBRXBELElBQUk7S0FDSixXQUFXO0tBQ1gsU0FBUyxHQUFHLEVBQUU7S0FDZCxNQUFNLEdBQUcsVUFBVSxDQUFDLEVBQUU7O1VBRWpCLFlBQVk7UUFDYixNQUFNLEdBQUcsU0FBUzs7RUFFeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXO0dBQ3JCLElBQUk7R0FDSixXQUFXO0dBQ1gsU0FBUyxFQUFFLFNBQVMsR0FBRyxFQUFFO0dBQ3pCLE1BQU07OztFQUVSLElBQUksQ0FBQyxHQUFHOzs7Ozs7Ozs7Ozs7O0VBYWEsSUFBSTs7Ozs7RUFJSixTQUFTOzs7OztFQU1KLFdBQVc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
